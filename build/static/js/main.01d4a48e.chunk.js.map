{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variants","components","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","variant","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8TAuBeA,G,MAnBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACpBC,EADiD,EAApBC,WACPF,EAAQE,SACpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC3C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,sBAC5C,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAQ,QACRC,SAAW,KACXC,WAAa,OAEfR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MALD,IAKwDF,EAAQA,gB,iBCDrEU,EAZKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,Y,yBCsDRC,MA1Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNrB,EAHM,KAGI0B,EAHJ,KA8Bb,OAzBAC,qBAAU,WACRnB,EAAGoB,WAAW,YAAYC,QAAQ,YAAa,QAC9CC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIrC,QAASoC,EAAIE,iBAEjE,IAEHT,qBAAU,WACRD,EAAYW,OAAO,6BAElB,IAgBD,yBAAKpC,UAAU,OACb,yBAAKqC,IAAI,0GACT,uCAAatC,GACb,0BAAMC,UAAU,aAChB,kBAACsC,EAAA,EAAD,CAAatC,UAAU,oBACrB,kBAACuC,EAAA,EAAD,CAAOvC,UAAU,aAAawC,YAAY,qBAAqBC,MAAOpB,EAAOqB,SAAU,SAAAC,GAAK,OAAIrB,EAASqB,EAAMC,OAAOH,UACtH,kBAACI,EAAA,EAAD,CAAY7C,UAAU,kBAAkB8C,UAAWzB,EAAO0B,QAAQ,YAAY3C,MAAM,UAAU4C,KAAK,SAASC,QAlB9F,SAACN,GAEjBA,EAAMO,iBACN3C,EAAGoB,WAAW,YAAYwB,IAAI,CAC5BtD,QAASwB,EACTtB,SAAUA,EACVqD,UAAW5C,IAASU,UAAUmC,WAAWC,oBAE3ChC,EAAS,MAWL,kBAAC,IAAD,SAIJ,kBAAC,IAAD,KAEEC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIrC,EAAN,EAAMA,QAAN,OACb,kBAAC,EAAD,CAAS0D,IAAKrB,EAAInC,SAAUA,EAAUF,QAASA,UC1CnC2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5E,c","file":"static/js/main.01d4a48e.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React, { forwardRef } from 'react'\r\nimport './Message.css'\r\n\r\nconst Message = forwardRef(({ message, username }, ref) => {\r\n    const isUser = username === message.username;  \r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\r\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\r\n                <CardContent>\r\n                    <Typography\r\n                        color = \"white\"\r\n                        variants = \"h5\"\r\n                        components = \"h2\"\r\n                    >\r\n                    {!isUser && `${message.username || 'Unknown User'}: `} {message.message}</Typography>    \r\n                </CardContent>    \r\n            </Card>    \r\n            \r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyDIJgBuwhEXGHWH1uFeGVgI_0-Kxtq5MyM\",\r\n    authDomain: \"fbmsg-wolvhe.firebaseapp.com\",\r\n    databaseURL: \"https://fbmsg-wolvhe.firebaseio.com\",\r\n    projectId: \"fbmsg-wolvhe\",\r\n    storageBucket: \"fbmsg-wolvhe.appspot.com\",\r\n    messagingSenderId: \"118867998099\",\r\n    appId: \"1:118867998099:web:db2174e841251c6e346466\",\r\n    measurementId: \"G-WEZ3NRL155\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Button, FormControl, Input, InputLabel, IconButton} from '@material-ui/core';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n\n  useEffect(() => {  \n    db.collection('messages').orderBy('timestamp', 'desc') \n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    });\n  }, [])\n\n  useEffect(() => {\n    setUsername(prompt('Please enter your name'))\n    \n  }, []) \n\n  //console.log(messages);\n  //for sending a message\n  const sendMessage = (event) => {   \n      //logic for list of msg\n      event.preventDefault();\n      db.collection('messages').add({\n        message: input,\n        username: username,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })      \n      setInput('');\n  }\n\n  return (\n    <div className=\"App\">\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTVKvGW_04tITbEzMo0lO41u6SCGA4KF3HReA&usqp=CAU\"/>\n      <h2>Welcome {username}</h2>\n      <form className=\"app__form\">  \n      <FormControl className=\"app__formControl\">\n        <Input className=\"app__input\" placeholder='Enter a message...' value={input} onChange={event => setInput(event.target.value)} />\n        <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessage}>\n          <SendIcon />\n        </IconButton>\n      </FormControl>\n      </form>\n      <FlipMove>\n      {\n        messages.map(({id, message}) =>(\n        <Message key={id} username={username} message={message} />\n        )) \n      }\n      </FlipMove>\n      \n    </div>\n\n\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}